// Code generated by protoc-gen-go.
// source: media.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	media.proto

It has these top-level messages:
	HeartBeatRequest
	HeartBeatResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HeartBeatRequest_ClientType int32

const (
	HeartBeatRequest_TypeWindows HeartBeatRequest_ClientType = 0
	HeartBeatRequest_TypeUbuntu  HeartBeatRequest_ClientType = 1
	HeartBeatRequest_TypeAndrod  HeartBeatRequest_ClientType = 2
)

var HeartBeatRequest_ClientType_name = map[int32]string{
	0: "TypeWindows",
	1: "TypeUbuntu",
	2: "TypeAndrod",
}
var HeartBeatRequest_ClientType_value = map[string]int32{
	"TypeWindows": 0,
	"TypeUbuntu":  1,
	"TypeAndrod":  2,
}

func (x HeartBeatRequest_ClientType) String() string {
	return proto.EnumName(HeartBeatRequest_ClientType_name, int32(x))
}
func (HeartBeatRequest_ClientType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type HeartBeatRequest struct {
	ClientID string `protobuf:"bytes,1,opt,name=ClientID,json=clientID" json:"ClientID,omitempty"`
	ClientIP string `protobuf:"bytes,2,opt,name=ClientIP,json=clientIP" json:"ClientIP,omitempty"`
}

func (m *HeartBeatRequest) Reset()                    { *m = HeartBeatRequest{} }
func (m *HeartBeatRequest) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatRequest) ProtoMessage()               {}
func (*HeartBeatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HeartBeatResponse struct {
	IsOk bool `protobuf:"varint,1,opt,name=IsOk,json=isOk" json:"IsOk,omitempty"`
}

func (m *HeartBeatResponse) Reset()                    { *m = HeartBeatResponse{} }
func (m *HeartBeatResponse) String() string            { return proto.CompactTextString(m) }
func (*HeartBeatResponse) ProtoMessage()               {}
func (*HeartBeatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HeartBeatRequest)(nil), "api.HeartBeatRequest")
	proto.RegisterType((*HeartBeatResponse)(nil), "api.HeartBeatResponse")
	proto.RegisterEnum("api.HeartBeatRequest_ClientType", HeartBeatRequest_ClientType_name, HeartBeatRequest_ClientType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for RPCServer service

type RPCServerClient interface {
	HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (RPCServer_StreamClient, error)
}

type rPCServerClient struct {
	cc *grpc.ClientConn
}

func NewRPCServerClient(cc *grpc.ClientConn) RPCServerClient {
	return &rPCServerClient{cc}
}

func (c *rPCServerClient) HeartBeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	out := new(HeartBeatResponse)
	err := grpc.Invoke(ctx, "/api.RPCServer/HeartBeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServerClient) Stream(ctx context.Context, opts ...grpc.CallOption) (RPCServer_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RPCServer_serviceDesc.Streams[0], c.cc, "/api.RPCServer/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServerStreamClient{stream}
	return x, nil
}

type RPCServer_StreamClient interface {
	Send(*HeartBeatRequest) error
	Recv() (*HeartBeatResponse, error)
	grpc.ClientStream
}

type rPCServerStreamClient struct {
	grpc.ClientStream
}

func (x *rPCServerStreamClient) Send(m *HeartBeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServerStreamClient) Recv() (*HeartBeatResponse, error) {
	m := new(HeartBeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RPCServer service

type RPCServerServer interface {
	HeartBeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	Stream(RPCServer_StreamServer) error
}

func RegisterRPCServerServer(s *grpc.Server, srv RPCServerServer) {
	s.RegisterService(&_RPCServer_serviceDesc, srv)
}

func _RPCServer_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServerServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RPCServer/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServerServer).HeartBeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCServer_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServerServer).Stream(&rPCServerStreamServer{stream})
}

type RPCServer_StreamServer interface {
	Send(*HeartBeatResponse) error
	Recv() (*HeartBeatRequest, error)
	grpc.ServerStream
}

type rPCServerStreamServer struct {
	grpc.ServerStream
}

func (x *rPCServerStreamServer) Send(m *HeartBeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServerStreamServer) Recv() (*HeartBeatRequest, error) {
	m := new(HeartBeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RPCServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.RPCServer",
	HandlerType: (*RPCServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _RPCServer_HeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _RPCServer_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("media.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4d, 0x4d, 0xc9,
	0x4c, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0xea, 0x64, 0xe4,
	0x12, 0xf0, 0x48, 0x4d, 0x2c, 0x2a, 0x71, 0x4a, 0x4d, 0x2c, 0x09, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x70, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xf1, 0x74, 0x91, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x48, 0x86, 0xf2, 0x91, 0xe4, 0x02, 0x24, 0x98, 0x50, 0xe4, 0x02,
	0x94, 0x6c, 0xb9, 0xb8, 0x20, 0x72, 0x21, 0x95, 0x05, 0xa9, 0x42, 0xfc, 0x5c, 0xdc, 0x20, 0x3a,
	0x3c, 0x33, 0x2f, 0x25, 0xbf, 0xbc, 0x58, 0x80, 0x41, 0x88, 0x8f, 0x8b, 0x0b, 0x24, 0x10, 0x9a,
	0x54, 0x9a, 0x57, 0x52, 0x2a, 0xc0, 0x08, 0xe3, 0x3b, 0xe6, 0xa5, 0x14, 0xe5, 0xa7, 0x08, 0x30,
	0x29, 0xa9, 0x73, 0x09, 0x22, 0x39, 0xa5, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x88, 0x8b,
	0xc5, 0xb3, 0xd8, 0x3f, 0x1b, 0xec, 0x0e, 0x8e, 0x20, 0x96, 0xcc, 0x62, 0xff, 0x6c, 0xa3, 0x0e,
	0x46, 0x2e, 0xce, 0xa0, 0x00, 0xe7, 0xe0, 0xd4, 0xa2, 0xb2, 0xd4, 0x22, 0x21, 0x1b, 0x2e, 0x4e,
	0xb8, 0x36, 0x21, 0x51, 0xbd, 0xc4, 0x82, 0x4c, 0x3d, 0x74, 0x1f, 0x49, 0x89, 0xa1, 0x0b, 0x43,
	0x4c, 0x57, 0x62, 0x10, 0xb2, 0xe5, 0x62, 0x0b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x25, 0x59, 0xab,
	0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0x38, 0x2c, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44,
	0x19, 0x8f, 0x81, 0x5a, 0x01, 0x00, 0x00,
}
